This file is for learning jenkins with docker, aws, ansible

Linux Centos Machine uname/pwd: jenkins/1234
Jenkins uname/pwd: admin/1234

--------------------
Basic Linux Commands
--------------------
#ls
#ll
#whoami
#logout
#pwd
#rm -i filename  -> To delete a file
#cp source destination   eg. cp /tmp/script.sh /tmp/backup/script.sh-> To copy a file
#mkdir foldername  -> To create a folder



--------------------
Basic Docker Commands
---------------------
#docker images
#docker ps


---------------------

#sudo systemctl enable docker

#docker ps

#whoami

#logout

#docker ps

#sudo curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose  -> docker compose installation

#sudo chmod +x /usr/local/bin/docker-compose  -> Giving executable permission for that path 

#docker-compose

#docker pull jenkins

#docker images

#docker info | grep -i root  -> To know where docker is saving the files

#sudo du -sh /var/lib/docker  -> To know how much space docker is taking

#ll

#ls

#mkdir jenkins

#pwd

#mv jenkins/ jenkins-data

#cd jenkins-data/

#mkdir jenkins_home

#vi docker-compose.yml

#echo $PWD

#echo $PWD/jenkins_home

#cat docker-compose.yml

#ls -l

#ls jenkins_home/ -l

#id

#sudo chown 1000:1000 jenkins_home -R

#docker-compose up -d

#docker ps

#docker logs -f jenkins    -> this provides the password for jenkins login: login to ip: http://192.168.225.85:8080/

#docker-compose stop   -> to stop the jenkins
#docker-compose start -> to start the jenkins
#docker-compose resart jenkins  -> to resart the jenkins
#docker-compose down -> to delete the service
#docker-compose up -d  -> create the servic or recreate the service

#rm -r jenkins_home   -> to delete a folder and its content
#docker rmi Image Image -> to remove a docker image(remove it from container before removing)

#docker exec -ti jenkins bash  -> to navigate inside jenkins image

#exit --> to exit from jenkins image

#touch /tmp/hello  -> to create a file

#cat /tmp/hello  -> to view the file


 echo "Current date and time is $(date)"  -> to print via windows shell
  echo "Current date and time is $(date)" > /tmp/info
cat /tmp/info
NAME=Vijai
echo "My name is $NAME"
 rm -rf /tmp/info  -> to delete the file
 
vi script.sh   -> to create file - use vi and file name
./script.sh  -> to execute a script file, if getting permission denied, then need to set executable permission.
chmod +x ./script.sh  -> To set executable permission

NAME=$1
LASTNAME=$2
echo "hello, $NAME $LASTNAME"    -> add this to script file to execute

docker cp script.sh jenkins:/tmp/script.sh  -> To copy file to docker container, here jenkins is the name of the container and script.sh is the name of the file.

ctrl + r  -> to search for a previously entered comments.

-----------------------------------
Jenkins Jobs Windows Terminal Commands

NAME=Vijai
LASTNAME=Selvam
SHOW=true
echo Hello World
echo "Name is $NAME Current date and time is $(date)"
echo "Current date and time is $(date)" > /tmp/info
/tmp/script.sh $NAME $LASTNAME $SHOW

script.sh file
#!/bin/bash

NAME=$1
LASTNAME=$2
SHOW=$3

if [ "$SHOW" = "true" ]; then
 echo "hello, $NAME $LASTNAME"
else
 echo "Please check show button"
fi

-----------------------------------


To Create a Docker Image


#mkdir centos7
#cd centos7
#vi Dockerfile

Dockerfile: 
----
FROM centos:7

RUN yum -y install openssh-server

RUN useradd remote_user && \
    echo "1234" | passwd remote_user --stdin && \
    mkdir /home/remote_user/.ssh && \
    chmod 700 /home/remote_user/.ssh
----	
end of file

#ssh-keygen -f remote-key   -> create ssh remote key
#ll  -> list remote key files

Update docker-compose.yml file
-----
version: '3'
services:
  jenkins:
    container_name: jenkins
    image: jenkins/jenkins
    ports:
      - "8080:8080"
    volumes:
      - $PWD/jenkins_home:/var/jenkins_home
    networks:
      - net
  remote_host:
    container_name: remote-host
    image: remote-host
    build:
      context: centos7
    networks:
      - net
networks:
  net:
----
end of file

#docker-compose build   -> to create the image

#docker images --> check will be having the new image.

#docker-compose up -d   -> to spin up the remote host server

#docker ps   -> remote host will be up and running

#ssh remote_user@remote_host --> now ssh in remote_host, use password 1234

#exit
#docker cp ./remote-key jenkins:/tmp/remote-key
#docker exec -ti jenkins bash
#cd tmp/
#ssh -i remote-key remote_user@remote_host  -> To ssh using private key file without password.


-----------------------------------------
Create SQl image

Add this in docker-compose.yml file
----
db_host:
    container_name: db
    image: mysql:5.7
    environment:
      - "MYSQL_ROOT_PASSWORD=1234"
    volumes:
      - "$PWD/db_data:/var/lib/mysql"
    networks:
      - net
----
#docker-compose up -d     -> to download the image

#docker logs -f db   -> to check the logs of mysql container db

#docker exec -ti db bash  --> enter into the container

#mysql -u root -p  -> login to mysql
 
#show databases;  -> to check for the databases.
 
#exit
 
#docker exec -ti remote-host bash  -> connect to remote host and check for mysql and aws. Both won't be available. Then we need to recreate the image with mysql and aws.
 
Then add the below configuration in docker file to build again.
--- 
RUN yum -y install mysql

RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
    python3 get-pip.py && \
    pip3 install awscli --upgrade
	
---

#docker-compose build  -> to recreate the remote-host image

 

#docker-compose up -d  -> Once image has been download then spin the server again

Now if you login to remote-host and check for mysql and aws, it will be shown.

To connect to mysql instance

#docker exec -ti remote-host bash  -> enter into remote host
#mysql -u root -h db_host -p1234   -> connect to mysql -u(user) root user  and -h (host we are trying to connect) here its db_host(name is mentioned in docker-compose file) -p (using password 1234)

To Create Database
--------
>create database testdb;
>use testdb;
>create table info (name varchar(20), lastname varchar(20), age int(2));
>desc info;
>show tables;
>insert into info values ("Vijai", "Selvam", 27);
>select * from info;
----------------------------------------


docker rm -fv remote-host   -> to delete a container

-----------------
How to check if a directory is exits
-----------------
DIR="/etc/httpd/"
if [ -d "$DIR" ]; then
  ### Take action if $DIR exists ###
  echo "Installing config files in ${DIR}..."
else
  ###  Control will jump here if $DIR does NOT exists ###
  echo "Error: ${DIR} not found. Can not continue."
  exit 1
fi
-------------------
Access all Jenkins environment variables here https://wiki.jenkins.io/display/JENKINS/Building+a+software+project#:~:text=and%20configure%20appropriately-,Jenkins%20Set%20Environment%20Variables,all%20of%20these%20environment%20variables.&text=The%20name%20of%20the%20node%20the%20current%20build%20is%20running%20on.

------------------------------
Section 9 Configure Email Notification
------------------------------
1. Maker sure mailer plugin is installed.
2. Goto Manage Jenkins -> Configure System - At the end check email notification
3. To connect with gmail -> Enter gmail smtp server
4. Check Smptp Authentication -> click advanced -> enter gmail usernam/password -> Check use SSL -> Enter 465 as SmTP port
5. In google search for less secure apps -> Choose your gmail account and enable this option.

-----------------------
Section 10 Jenkins and Maven
-----------------
1. Install maven plugin if not already installed -Maven Integration
2. Check if git plugin is installed if not then install it.
3. check for sample maven app in google and copy the git url 
4. sample app url: https://github.com/jenkins-docs/simple-java-maven-app.git
5. Create a new job and place the url and build.
6. To check for workspace
[jenkins@localhost ~]$ docker exec -ti jenkins bash
jenkins@c035637d83ec:/$ cd /var/jenkins_home/workspace/
jenkins@c035637d83ec:~/workspace$ ls -l
To check for the cloned git
jenkins@c035637d83ec:~/workspace$ cd maven-job/
jenkins@c035637d83ec:~/workspace/maven-job$ ls -l
To see the hidden files
jenkins@c035637d83ec:~/workspace/maven-job$ ls -la
How to build a jar using maven
-------
1. define maven installation in jenkins -> manage jenkins -> global tool configuration -> maven  (eg. name: jenkins-maven)
2. Configure the maven-job -> Build -> Invoke top level maven targets -> choose the name already given eg. jenkins-maven
3. Add the build goal(you can copy this code from jenkins folder in the git url mentioned) -> -B -DskipTests clean package - save and build now
4. Check the jar file in target folder.
5. Now Configure the maven-job for test -> Build -> Invoke top level maven targets -> choose the name already given eg. jenkins-maven
3. Add the build goal -> test - save and build now
Deploy the jar
--------
1. copy the jar path from console output eg here. /var/jenkins_home/workspace/maven-job/target/my-app-1.0-SNAPSHOT.jar
2. Configure the maven-job -> Build -> Execute shell
3. Add the below code and save and build now -> you will see "hello world" in console output.
echo "********"
java -jar /var/jenkins_home/workspace/maven-job/target/my-app-1.0-SNAPSHOT.jar
To display the result of test using graph
------
1. Get the details of the report from console output -> [INFO] Surefire report directory: /var/jenkins_home/workspace/maven-job/target/surefire-reports
2. Check in putty jenkins@c035637d83ec:~/workspace/maven-job$ ls target/surefire-reports/
3. there is an xml file contains the report. So provide this path in job eg. target/surefire-reports/*.xml
4. Configure the maven-job -> Post Build Actions -> Publish Junit Test Results Report -> target/surefire-reports/*.xml -> click save and build atleast 2 times to see the report
--------------
To archieve Artifacts eg. To archive the jar built.
--------------
1. 6. To Connect to docker
[jenkins@localhost ~]$ docker exec -ti jenkins bash
jenkins@c035637d83ec:/$ cd /var/jenkins_home/workspace/maven-job/
jenkins@c035637d83ec:~/workspace/maven-job$ ls -l target/*.jar
2. Copy the path target/*.jar
3. Configure the jenkins maven-job -> End of the configuration page -> Add post-build action-> Archive Artifacts -> Enter the path eg. target/*.jar
4. Click save and build.
5. You will see the artifacts in the dashboard. You can also download it.
-------
Email Notification about build failure
------
1. configure the maven-job -> Add post build acction-> Email notification -> Enter your email.
2. To test failure -> pass some wrong params -> And save and build now to see 
3. If mail not getting sent, Make sure you have configured mailing setup.


-----------------
Pipeline Creation
-----------------
1. Install pipeline plugin in jenkins
2. Copy the script in first-pipelinscript.txt file.
3. Create new item in jenkins named pipeline and choose pipeline option and click ok.
4. paste the code in the bottom of the pipeline job in pipeline script. Click save
5. Click build now -> you will see the stage view of different stages.

Here is the code for first pipeline
---
pipeline {
	agent any
	stages {
		stage('Build') {
			steps {
				echo 'Building..'
			}
		}
		stage ('Test') {
			steps {
				echo 'Testing..'
			}
		}
		stage ('Deploy') {
			steps {
				echo 'Deploying..'
			}
		}	
	}
}
---

Add multi Steps to your pipeline

pipeline {
	agent any
	stages {
		stage('Build') {
			steps {
				sh 'echo "My First pipeline"'
				sh '''
					echo "B the way, I can do more stuffs here"
					ls -lah
				'''
			}
		}
	}
}
-------------
retry steps
-----
pipeline {
	agent any
	stages {
		stage('Build') {
			steps {
				retry(3) {
					sh 'I am not going to work :c'
				}
			}
		}
	}
}
------
timeout steps 
-------
pipeline {
	agent any
	stages {
		stage('Deploy') {
			steps {
				retry(3) {
					sh 'echo Hello Vijai'
				}
				timeout(time: 3, unit: 'SECONDS') {
					sh 'sleep 5'
				}
			}
		}
	}
}
--------
Environment Variables
---------
pipeline {
	agent any
	environment {
		NAME = 'Vijai'
		LASTNAME = 'Selvam'
	}
	stages {
		stage('Build') {
			steps {
				sh 'echo Hello $NAME $LASTNAME'
			}
		}
	}
}
--------
Credentials
---------
pipeline {
	agent any
	environment {
		secret = credentials('SECRET_TEXT')
	}
	stages {
		stage('Build') {
			steps {
				sh 'echo $secret'
			}
		}
	}
}
--------
POST ACTIONS
---------
pipeline {
	agent any
	stages {
		stage('Test') {
			steps {
				sh 'echo "Fail!"; exit 1'
			}
		}
	}
	post {
		always {
			echo 'I will always get executed :D'
		}
		success {
			echo 'I will only get executed if this success'
		}
		failure {
			echo 'I will only get executed if this fails'
		}
		unstable {
			echo 'I will only get executed if this is unstable'
		}
	}
}
----------
General Login steps;
----------
1. Connect internet to laptop and Open VirutualBox-Start centos
2. Enter Linux Centos Machine uname/pwd: jenkins/1234
3. type ip a -> to show IP Address(ip should start with 192)eg. 192.168.225.85
4. Open putty connect to this ip 192.168.225.85 -> enter username/passwd - jenkins/1234
cd jenkins-data/
docker images
docker-compose build
docker-compose up -d
docker ps

To Open Jenkins in browser http://192.168.225.85:8080/
Jenkins uname/pwd: admin/1234

-----------------


